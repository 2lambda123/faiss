<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structfaiss_1_1IndexFlatCodes" kind="struct" language="C++" prot="public" abstract="yes">
    <compoundname>faiss::IndexFlatCodes</compoundname>
    <basecompoundref refid="structfaiss_1_1Index" prot="public" virt="non-virtual">faiss::Index</basecompoundref>
    <derivedcompoundref refid="structfaiss_1_1Index2Layer" prot="public" virt="non-virtual">faiss::Index2Layer</derivedcompoundref>
    <derivedcompoundref refid="structfaiss_1_1IndexAdditiveQuantizer" prot="public" virt="non-virtual">faiss::IndexAdditiveQuantizer</derivedcompoundref>
    <derivedcompoundref refid="structfaiss_1_1IndexFlat" prot="public" virt="non-virtual">faiss::IndexFlat</derivedcompoundref>
    <derivedcompoundref refid="structfaiss_1_1IndexLSH" prot="public" virt="non-virtual">faiss::IndexLSH</derivedcompoundref>
    <derivedcompoundref refid="structfaiss_1_1IndexPQ" prot="public" virt="non-virtual">faiss::IndexPQ</derivedcompoundref>
    <derivedcompoundref refid="structfaiss_1_1IndexScalarQuantizer" prot="public" virt="non-virtual">faiss::IndexScalarQuantizer</derivedcompoundref>
    <includes refid="IndexFlatCodes_8h" local="no">IndexFlatCodes.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1IndexFlatCodes_1a373685122b58f930ee9345fb09ac78ff" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::IndexFlatCodes::code_size</definition>
        <argsstring></argsstring>
        <name>code_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="21" column="12" bodyfile="faiss/IndexFlatCodes.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexFlatCodes_1ad5bb76b70b977dc2c677b899ece9248c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; faiss::IndexFlatCodes::codes</definition>
        <argsstring></argsstring>
        <name>codes</name>
        <briefdescription>
<para>encoded dataset, size ntotal * code_size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="24" column="17" bodyfile="faiss/IndexFlatCodes.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a2a002388d2c081c2dbab8508dcefe73d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::Index::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
<para>vector dimension </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="57" column="9" bodyfile="faiss/Index.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a6970683faa021b7a6f1a0865c0d4eccd" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
        <definition>idx_t faiss::Index::ntotal</definition>
        <argsstring></argsstring>
        <name>ntotal</name>
        <briefdescription>
<para>total nb of indexed vectors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="58" column="11" bodyfile="faiss/Index.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a5590d847c5c2b958affd2a05e58a6f23" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::Index::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
<para>verbosity level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="59" column="10" bodyfile="faiss/Index.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a6e92732617c4dbe364e7678dd8773a7f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::Index::is_trained</definition>
        <argsstring></argsstring>
        <name>is_trained</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set if the <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> does not require training, or if training is done already </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="63" column="10" bodyfile="faiss/Index.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a8e18f641854b2bde83ecff0a2f9a6f4e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
        <definition>MetricType faiss::Index::metric_type</definition>
        <argsstring></argsstring>
        <name>metric_type</name>
        <briefdescription>
<para>type of metric this index uses for search </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="66" column="16" bodyfile="faiss/Index.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a6f60646d6877658ea4df05e0231ed232" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float faiss::Index::metric_arg</definition>
        <argsstring></argsstring>
        <name>metric_arg</name>
        <briefdescription>
<para>argument of the metric type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="67" column="11" bodyfile="faiss/Index.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1afccb3874bf2c6e0ff430aeb2cdb87122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexFlatCodes::IndexFlatCodes</definition>
        <argsstring>()</argsstring>
        <name>IndexFlatCodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1aadee8e22d573fd5832cb1d8d99781d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexFlatCodes::IndexFlatCodes</definition>
        <argsstring>(size_t code_size, idx_t d, MetricType metric=METRIC_L2)</argsstring>
        <name>IndexFlatCodes</name>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
          <defval><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" kindref="member">METRIC_L2</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="28" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1a65334d3e1a47f07729eb44b39b849611" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexFlatCodes::add</definition>
        <argsstring>(idx_t n, const float *x) override</argsstring>
        <name>add</name>
        <reimplements refid="structfaiss_1_1Index_1a1b5e9ac70adbce0897dd6c8276ad96f2">add</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>default add uses sa_encode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="31" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1afedfd72f57bcbc7d3a94fda7cb90c88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexFlatCodes::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <reimplements refid="structfaiss_1_1Index_1a849361f5f0ab0aba8d419c86f2594191">reset</reimplements>
        <briefdescription>
<para>removes all elements from the database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="33" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1a166582b8b10fc86e77ce8c48854496f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexFlatCodes::reconstruct_n</definition>
        <argsstring>(idx_t i0, idx_t ni, float *recons) const override</argsstring>
        <name>reconstruct_n</name>
        <reimplements refid="structfaiss_1_1Index_1ae7c0b683e1fd5c8770ea2b3e1a82ce7f">reconstruct_n</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>i0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>ni</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
<para>reconstruction using the codec interface </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="36" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1afe96eb3293cc5428f9077648b23fcc4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexFlatCodes::reconstruct</definition>
        <argsstring>(idx_t key, float *recons) const override</argsstring>
        <name>reconstruct</name>
        <reimplements refid="structfaiss_1_1Index_1afaf9673009f9fe5a53ed6db522a5f69c">reconstruct</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct a stored vector (or an approximation if lossy coding)</para>
<para>this function may not be defined for some indexes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the vector to reconstruct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vector (size d) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="38" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1a7252bbbd4059cb1ea4b43e52eadc920a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t faiss::IndexFlatCodes::sa_code_size</definition>
        <argsstring>() const override</argsstring>
        <name>sa_code_size</name>
        <reimplements refid="structfaiss_1_1Index_1a5a050b805d4836afdf8f09251ad8b415">sa_code_size</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size of the produced codes in bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="40" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1a6d033f2cbc377bb26948a5dfa6b5aa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t faiss::IndexFlatCodes::remove_ids</definition>
        <argsstring>(const IDSelector &amp;sel) override</argsstring>
        <name>remove_ids</name>
        <reimplements refid="structfaiss_1_1Index_1ab70f7d0acb4a2f22857da3b17559ae82">remove_ids</reimplements>
        <param>
          <type>const IDSelector &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>remove some ids. NB that Because of the structure of the indexing structure, the semantics of this operation are different from the usual ones: the new ids are shifted </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="45" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1a4c2192dacfb37f496d98261c796e509f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>FlatCodesDistanceComputer *</type>
        <definition>virtual FlatCodesDistanceComputer* faiss::IndexFlatCodes::get_FlatCodesDistanceComputer</definition>
        <argsstring>() const</argsstring>
        <name>get_FlatCodesDistanceComputer</name>
        <reimplementedby refid="structfaiss_1_1IndexAdditiveQuantizer_1a3516b0ead9288dc9a5fd4d1e31925c5c">get_FlatCodesDistanceComputer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1a6d92cd004fadda1a24389febd145f919">get_FlatCodesDistanceComputer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a9bcf315b2636e5c11c88df6e4f4ef013">get_FlatCodesDistanceComputer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1a5396c3f2f2ee3a716ef2accb6d5d8e24">get_FlatCodesDistanceComputer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>a FlatCodesDistanceComputer offers a distance_to_code method </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="48" column="39"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexFlatCodes_1ab8d0293ab8e1cf28eaa5c612e7ea0516" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>DistanceComputer *</type>
        <definition>DistanceComputer* faiss::IndexFlatCodes::get_distance_computer</definition>
        <argsstring>() const override</argsstring>
        <name>get_distance_computer</name>
        <reimplements refid="structfaiss_1_1Index_1ab53ef983521567c3dc3fee4543546e6a">get_distance_computer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a DistanceComputer (defined in AuxIndexStructures) object for this kind of index.</para>
<para>DistanceComputer is implemented for indexes that support random access of their vectors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFlatCodes.h" line="50" column="22" bodyfile="faiss/IndexFlatCodes.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a8f67dfd73993e192dc78f2c93d9d9532" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::train</definition>
        <argsstring>(idx_t n, const float *x)</argsstring>
        <name>train</name>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a370dc8afa7357850d9031585ec8e2291">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexRefine_1a759db97766dcfe29c162e3339d68bd7d">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a87898add5ab4d86ba901ca79778fc11e">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLattice_1a19a6d0136b34d904d147f16922a64b93">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1a300647e9cdac9acd160f2c55c610056b">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQFastScan_1ae8846519e0f1b9fedd5eed195df3776f">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLSH_1a01f569a16a812aa3945b8a0b64eaff06">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexNNDescent_1a11e65f02f9edb9c09fc0152486b96aff">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1a48cbf519590313f1c6a3dc89c8d0678c">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexAdditiveQuantizerFastScan_1ac209f095ccac62ca6cc86d24923471d3">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexNSG_1a024c25f4757df14fb741ca9a6fb4cfcb">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlatDedup_1a24002a8c3f12aa2784833c14b13b427e">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexResidualQuantizer_1a1870bea9540fe4cb8308c09104048332">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexHNSW_1a40bc6d2c67545f95e322c63d68a47140">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexNSGPQ_1afa79e49f634ed87c0f597b9d9fc2f111">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLocalSearchQuantizer_1aa63fc9328d0f202707f9fc947cc423f4">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexSplitVectors_1aafa4c780e325855fe247052453967845">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1AdditiveCoarseQuantizer_1a150b455e4152bc63ae4f51ba44405475">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a7a1d5eec194db0977b2318c6ed6a2b86">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1MultiIndexQuantizer_1a6fa1d1a295eb2d4377b8de5096ab3ef4">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexHNSWPQ_1ae99b976eeb25717d10055b1786aa011c">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1MultiIndexQuantizer2_1a553b9a33e9be7f231ffdc0ac53c59e7c">train</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexIVFFlat_1a3c5b3760acb01814892fe93c72f08304">train</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexIVFScalarQuantizer_1a11c52bf069e04520b000cf888c06cb05">train</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1a0e74fad76628ddfb5ae3dc1d1c69f7e8">train</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexIVFPQ_1ac4814acafa4bc340a4c4bdcafd469b56">train</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform training on a representative set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training vecors, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="84" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a13b30ab195baded94b6db98d8e111ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::add_with_ids</definition>
        <argsstring>(idx_t n, const float *x, const idx_t *xids)</argsstring>
        <name>add_with_ids</name>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1aa37b7428e0ac315db5e52b1cb1e42605">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFPQR_1ae526b4722b470a33643d40ef30cf27f7">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlatDedup_1a4e27cfca56590371e0984d8f16b2b68d">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFastScan_1a8699e7d828750f02bfc86014269e4a6c">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a14e75169bddcd0251134821416b060a1">add_with_ids</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1a47f6969fe60d82b8e3407557ba9eec88">add_with_ids</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as add, but stores xids instead of sequential ids.</para>
<para>The default implementation fails with an assertion, as it is not supported by all indexes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xids</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-null, ids to store for the vectors (size n) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="102" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1aced51b1ebc33c47ab3ae15ea906559a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::search</definition>
        <argsstring>(idx_t n, const float *x, idx_t k, float *distances, idx_t *labels) const =0</argsstring>
        <name>search</name>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1a85510d70f4675197df9988651e4692c9">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexAdditiveQuantizer_1aa91d697fbe39412136c57502aa1327ea">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexRefine_1a954fe37f8741fafda9a6aba740044dc4">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a491ba3ed34093513e6a850fbca0abdd2">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1abf24732c29106bb808148c3d30599662">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a3c0fbdccaf9fdbadd4bf21560d334dd6">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLSH_1a66b6afb56afa1f58e2d93abfdfd223ee">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexNNDescent_1adefb0a4431d892410634129061fa5766">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLattice_1a9631d430b912348e5e16277251dda5e7">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1a5961efc2e19d9a6e5224f477b6d1b226">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexNSG_1a0158cc9692c69938b7f150bfd73f45b3">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFastScan_1a9f57cff1f986dcd059ad9f451b2f73e3">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexAdditiveQuantizerFastScan_1a12841ef6987a46c2a12e4716ac09899b">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexRefineFlat_1ad04444de1e2c26c463cc52f3c076dd41">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFAdditiveQuantizerFastScan_1a89b087d7af997f6b2262730cbf6f5025">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexHNSW_1ae0ddf6ab4a54239a25d6277e21e8548e">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFastScan_1a92de0135c7cf70bd0085838bf9fb432c">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFlat1D_1a65736f2900865cd156faba4fcd260d05">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexSplitVectors_1a4a010daf51e44d9717e94400cc23c159">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1AdditiveCoarseQuantizer_1a94ce7e6530f41d5a2e3fb4e91b2a0ee9">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1MultiIndexQuantizer_1a999ee03f4e65f453377e209d10e25681">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1ResidualCoarseQuantizer_1aa2caeaca675083d19d8ce0db4dc245ca">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1MultiIndexQuantizer2_1adff25d40c18f5d7a65d359d1cd80ea29">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexHNSW2Level_1a50a087a17ce5a7a1fbcca0836959b4ec">search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1ae2fd47b7d52603659e269aa8f6abb613">search</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1a4564ff946e4339156173b39449562971">search</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query n vectors of dimension d to the index.</para>
<para>return at most k vectors. If there are not enough results for a query, the result array is padded with -1s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output pairwise distances, size n*k </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="113" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a23c23be6698f583402bde568eee00ad1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::range_search</definition>
        <argsstring>(idx_t n, const float *x, float radius, RangeSearchResult *result) const</argsstring>
        <name>range_search</name>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1ac56b7ed90ab65fab9c586a1e56006d12">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a6713d5a98b6fa66a72f465d0af504fb8">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlatDedup_1acb4f1350039546f5001c5fc36ac0fb2d">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a5b7b4b3dc5ea40f7076a00c81cc83d66">range_search</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>RangeSearchResult *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query n vectors of dimension d to the index.</para>
<para>return all vectors with distance &lt; radius. Note that many indexes do not implement the range_search (only the k-NN search is mandatory).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>search radius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>result table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="130" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a010ae05c4ba70d309f9821d9b03182aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::assign</definition>
        <argsstring>(idx_t n, const float *x, idx_t *labels, idx_t k=1) const</argsstring>
        <name>assign</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1ac108456e9c7cde162d77f64cc9c0dcdb">assign</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the indexes of the k vectors closest to the query x.</para>
<para>This function is identical as search but only return labels of neighbors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="142" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a009874adf12440eb46396522ffd736cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::search_and_reconstruct</definition>
        <argsstring>(idx_t n, const float *x, idx_t k, float *distances, idx_t *labels, float *recons) const</argsstring>
        <name>search_and_reconstruct</name>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a10ae691e59f4a9b5be750cac4f542eee">search_and_reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a77aec24920024a09f7661790d9534c10">search_and_reconstruct</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Similar to search, but also reconstructs the stored vectors (or an approximation in the case of lossy coding) for the search results.</para>
<para>If there are not enough results for a query, the resulting arrays is padded with -1s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstructed vectors size (n, k, d) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="176" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a1f12e2118b37a511f51d63e1aa9c0c20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::compute_residual</definition>
        <argsstring>(const float *x, float *residual, idx_t key) const</argsstring>
        <name>compute_residual</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1a1c68659822d9e330a7737c8a6aaacae2">compute_residual</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1a5eed422bb7d06a28188e97909ae1facf">compute_residual</reimplementedby>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes a residual vector after indexing encoding.</para>
<para>The residual vector is the difference between a vector and the reconstruction that can be decoded from its representation in the index. The residual can be used for multiple-stage indexing methods, like <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>&apos;s methods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector, size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>residual</parametername>
</parameternamelist>
<parameterdescription>
<para>output residual vector, size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded index, as returned by search and assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="195" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1aff98fbf8e7dadf9ff528a031c53a43fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::compute_residual_n</definition>
        <argsstring>(idx_t n, const float *xs, float *residuals, const idx_t *keys) const</argsstring>
        <name>compute_residual_n</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1aac69097d303830c3d48c4016c1e6a955">compute_residual_n</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1a23b4a5f8a321d2ccf8768608c5a06ae1">compute_residual_n</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>residuals</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes a residual vector after indexing encoding (batch form). Equivalent to calling compute_residual for each vector.</para>
<para>The residual vector is the difference between a vector and the reconstruction that can be decoded from its representation in the index. The residual can be used for multiple-stage indexing methods, like <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>&apos;s methods.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors, size (n x d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>residuals</parametername>
</parameternamelist>
<parameterdescription>
<para>output residual vectors, size (n x d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded index, as returned by search and assign </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="211" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a16770c0addc888b92deee089d6f97e7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::sa_encode</definition>
        <argsstring>(idx_t n, const float *x, uint8_t *bytes) const</argsstring>
        <name>sa_encode</name>
        <reimplementedby refid="structfaiss_1_1IndexAdditiveQuantizer_1a32fa884e35be46b3244b90012bdcc016">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLattice_1abbe02fd8270a854f7b25285d9a0a5752">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a438591a838aad52cd69e021c7b93110f">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1ae8c5ed4f9c2145aa074986bf1be3af46">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexRefine_1a8f7cc71fbded7eaf35bcccf41603085d">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLSH_1aac0eb8b22431e490a28fdc566a461af5">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1aaa95cb6086e2889e1c3f4478e454bc67">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1a205db18d83af2fc98faab3f0066e8c9f">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a5fc4aff1479e447435e1f08b2a88d1d6">sa_encode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a9d28b314ee008589eb41ce2823a088b6">sa_encode</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>encode a set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>output encoded vectors, size n * <ref refid="structfaiss_1_1Index_1a5a050b805d4836afdf8f09251ad8b415" kindref="member">sa_code_size()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="236" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1af39e4b00d097ac05dc9e31c52bfb9ed7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::sa_decode</definition>
        <argsstring>(idx_t n, const uint8_t *bytes, float *x) const</argsstring>
        <name>sa_decode</name>
        <reimplementedby refid="structfaiss_1_1IndexAdditiveQuantizer_1af849220ce067392a737dcbca233326ad">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLattice_1a3fd27c778f435412336110785ba7124d">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlat_1a1464960b17488f8ee8ae600c07f7b72c">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a104104a52149ebdcb8ab79dc01180b6e">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1a96a5ca50fbdef07c7773bb9a27e860e5">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexRefine_1acff97ef10e27f43dc72f5faa21c67a4e">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexLSH_1ac1eaeea883e641e50c5b770fb02edc25">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1af84e108340092e5d3970ab8824a71658">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1aefba1e901bddaa812e853a8203b2f0b5">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFPQ_1adb7494c07ce7812226ad41c8b6dca992">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFPQFastScan_1acc76166d19edf5e34a36f352cf9c02cd">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a544759849772119156adf601287e50b0">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFAdditiveQuantizerFastScan_1a71dcc40c559af0fa5040b0e457ca3b44">sa_decode</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFScalarQuantizer_1ae10ad1a5c025337984277a68f4da4338">sa_decode</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>encode a set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>input encoded vectors, size n * <ref refid="structfaiss_1_1Index_1a5a050b805d4836afdf8f09251ad8b415" kindref="member">sa_code_size()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output vectors, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="244" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" prot="public" static="no">
        <type>int64_t</type>
        <definition>using faiss::Index::idx_t =  int64_t</definition>
        <argsstring></argsstring>
        <name>idx_t</name>
        <briefdescription>
<para>all indices are this type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="53" column="5" bodyfile="faiss/Index.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1Index_1af317cb1e2ad0bd145f716f2243b693eb" prot="public" static="no">
        <type>float</type>
        <definition>using faiss::Index::component_t =  float</definition>
        <argsstring></argsstring>
        <name>component_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="54" column="5" bodyfile="faiss/Index.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1Index_1a1c60d7a12bf3ad27054963df8cccd93f" prot="public" static="no">
        <type>float</type>
        <definition>using faiss::Index::distance_t =  float</definition>
        <argsstring></argsstring>
        <name>distance_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="55" column="5" bodyfile="faiss/Index.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> that encodes all vectors as fixed-size codes (size code_size). Storage is in the codes vector </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>faiss::IndexLocalSearchQuantizer</label>
        <link refid="structfaiss_1_1IndexLocalSearchQuantizer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>faiss::Index2Layer</label>
        <link refid="structfaiss_1_1Index2Layer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>faiss::IndexLSH</label>
        <link refid="structfaiss_1_1IndexLSH"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>faiss::IndexResidualQuantizer</label>
        <link refid="structfaiss_1_1IndexResidualQuantizer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>faiss::IndexScalarQuantizer</label>
        <link refid="structfaiss_1_1IndexScalarQuantizer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>faiss::IndexFlat</label>
        <link refid="structfaiss_1_1IndexFlat"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>faiss::IndexFlat1D</label>
        <link refid="structfaiss_1_1IndexFlat1D"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>faiss::IndexFlatIP</label>
        <link refid="structfaiss_1_1IndexFlatIP"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>faiss::IndexAdditiveQuantizer</label>
        <link refid="structfaiss_1_1IndexAdditiveQuantizer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>faiss::IndexFlatL2</label>
        <link refid="structfaiss_1_1IndexFlatL2"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>faiss::IndexPQ</label>
        <link refid="structfaiss_1_1IndexPQ"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>faiss::Index</label>
        <link refid="structfaiss_1_1Index"/>
      </node>
      <node id="1">
        <label>faiss::IndexFlatCodes</label>
        <link refid="structfaiss_1_1IndexFlatCodes"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>faiss::Index</label>
        <link refid="structfaiss_1_1Index"/>
      </node>
      <node id="1">
        <label>faiss::IndexFlatCodes</label>
        <link refid="structfaiss_1_1IndexFlatCodes"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/IndexFlatCodes.h" line="20" column="27" bodyfile="faiss/IndexFlatCodes.h" bodystart="20" bodyend="53"/>
    <listofallmembers>
      <member refid="structfaiss_1_1IndexFlatCodes_1a65334d3e1a47f07729eb44b39b849611" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>add</name></member>
      <member refid="structfaiss_1_1Index_1a13b30ab195baded94b6db98d8e111ed7" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1Index_1a010ae05c4ba70d309f9821d9b03182aa" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>assign</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1a373685122b58f930ee9345fb09ac78ff" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>code_size</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1ad5bb76b70b977dc2c677b899ece9248c" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>codes</name></member>
      <member refid="structfaiss_1_1Index_1af317cb1e2ad0bd145f716f2243b693eb" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>component_t</name></member>
      <member refid="structfaiss_1_1Index_1a1f12e2118b37a511f51d63e1aa9c0c20" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>compute_residual</name></member>
      <member refid="structfaiss_1_1Index_1aff98fbf8e7dadf9ff528a031c53a43fa" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>compute_residual_n</name></member>
      <member refid="structfaiss_1_1Index_1a2a002388d2c081c2dbab8508dcefe73d" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>d</name></member>
      <member refid="structfaiss_1_1Index_1a1c60d7a12bf3ad27054963df8cccd93f" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>distance_t</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1ab8d0293ab8e1cf28eaa5c612e7ea0516" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>get_distance_computer</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1a4c2192dacfb37f496d98261c796e509f" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>get_FlatCodesDistanceComputer</name></member>
      <member refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>idx_t</name></member>
      <member refid="structfaiss_1_1Index_1a7b8cc435b5619d5d8382010a424bf67e" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>Index</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1afccb3874bf2c6e0ff430aeb2cdb87122" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>IndexFlatCodes</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1aadee8e22d573fd5832cb1d8d99781d6f" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>IndexFlatCodes</name></member>
      <member refid="structfaiss_1_1Index_1a6e92732617c4dbe364e7678dd8773a7f" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>is_trained</name></member>
      <member refid="structfaiss_1_1Index_1a6f60646d6877658ea4df05e0231ed232" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>metric_arg</name></member>
      <member refid="structfaiss_1_1Index_1a8e18f641854b2bde83ecff0a2f9a6f4e" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>metric_type</name></member>
      <member refid="structfaiss_1_1Index_1a6970683faa021b7a6f1a0865c0d4eccd" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>ntotal</name></member>
      <member refid="structfaiss_1_1Index_1a23c23be6698f583402bde568eee00ad1" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>range_search</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1afe96eb3293cc5428f9077648b23fcc4e" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>reconstruct</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1a166582b8b10fc86e77ce8c48854496f8" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>reconstruct_n</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1a6d033f2cbc377bb26948a5dfa6b5aa3c" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>remove_ids</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1afedfd72f57bcbc7d3a94fda7cb90c88b" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>reset</name></member>
      <member refid="structfaiss_1_1IndexFlatCodes_1a7252bbbd4059cb1ea4b43e52eadc920a" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>sa_code_size</name></member>
      <member refid="structfaiss_1_1Index_1af39e4b00d097ac05dc9e31c52bfb9ed7" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>sa_decode</name></member>
      <member refid="structfaiss_1_1Index_1a16770c0addc888b92deee089d6f97e7c" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>sa_encode</name></member>
      <member refid="structfaiss_1_1Index_1aced51b1ebc33c47ab3ae15ea906559a7" prot="public" virt="pure-virtual"><scope>faiss::IndexFlatCodes</scope><name>search</name></member>
      <member refid="structfaiss_1_1Index_1a009874adf12440eb46396522ffd736cd" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>search_and_reconstruct</name></member>
      <member refid="structfaiss_1_1Index_1a8f67dfd73993e192dc78f2c93d9d9532" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>train</name></member>
      <member refid="structfaiss_1_1Index_1a5590d847c5c2b958affd2a05e58a6f23" prot="public" virt="non-virtual"><scope>faiss::IndexFlatCodes</scope><name>verbose</name></member>
      <member refid="structfaiss_1_1Index_1a5fa7dbbb77a2a5c69b444672d2f1b982" prot="public" virt="virtual"><scope>faiss::IndexFlatCodes</scope><name>~Index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
